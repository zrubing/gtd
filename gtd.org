* nodejs
** STARTED [[http://www.liaoxuefeng.com/wiki/001434446689867b27157e896e74d51a89c25cc8b43bdb3000/00143449917624134f5c4695b524e81a581ab5a222b05ec000][js 廖雪峰]]
   :LOGBOOK:
   CLOCK: [2017-10-08 周日 17:21]--[2017-10-08 周日 17:46] =>  0:25
   CLOCK: [2017-10-08 周日 10:09]--[2017-10-08 周日 10:34] =>  0:25
   CLOCK: [2017-10-07 周六 14:03]--[2017-10-07 周六 14:28] =>  0:25
   CLOCK: [2017-10-06 周五 23:18]--[2017-10-06 周五 23:43] =>  0:25
   CLOCK: [2017-10-06 周五 13:48]--[2017-10-06 周五 14:13] =>  0:25
   CLOCK: [2017-10-05 周四 20:34]--[2017-10-05 周四 20:59] =>  0:25
   CLOCK: [2017-10-04 周三 10:12]--[2017-10-04 周三 10:37] =>  0:25
   CLOCK: [2017-10-03 周二 13:46]--[2017-10-03 周二 14:11] =>  0:25
   CLOCK: [2017-09-30 周六 17:18]--[2017-09-30 周六 17:43] =>  0:25
   CLOCK: [2017-09-30 周六 13:31]--[2017-09-30 周六 13:56] =>  0:25
   CLOCK: [2017-09-26 周二 23:20]--[2017-09-26 周二 23:45] =>  0:25
   CLOCK: [2017-09-25 周一 17:04]--[2017-09-25 周一 17:29] =>  0:25
   CLOCK: [2017-09-24 周日 11:48]--[2017-09-24 周日 12:13] =>  0:25
   CLOCK: [2017-09-23 周六 17:59]--[2017-09-23 周六 18:24] =>  0:25
   CLOCK: [2017-09-22 周五 17:30]--[2017-09-22 周五 17:55] =>  0:25
   CLOCK: [2017-09-22 周五 16:16]--[2017-09-22 周五 16:41] =>  0:25
   CLOCK: [2017-09-21 周四 12:39]--[2017-09-21 周四 13:04] =>  0:25
   CLOCK: [2017-09-20 周三 16:14]--[2017-09-20 周三 16:39] =>  0:25
   CLOCK: [2016-09-25 周日 19:27]--[2016-09-25 周日 19:52] =>  0:25
   CLOCK: [2016-09-24 周六 10:58]--[2016-09-24 周六 11:23] =>  0:25
   CLOCK: [2016-09-22 周四 12:13]--[2016-09-22 周四 12:38] =>  0:25
   CLOCK: [2016-09-21 周三 09:53]--[2016-09-21 周三 10:18] =>  0:25
   CLOCK: [2016-09-20 周二 16:27]--[2016-09-20 周二 16:52] =>  0:25
   :END:
   - [X] 快速入门
     - [X] map 和 set
     - [X] iterable
   - [-] 函数
     - [X] 定义和调用
       - [X] arguments
       - [X] rest 参数
       - [X] 小心 return 语句
         #+BEGIN_SRC javascript 
         function foo() {
            return; // 自动添加了分号，相当于 return undefined;
            { name: 'foo' }; // 这行语句已经没法执行到了
         }
         #+END_SRC 
     - [X] 变量作用域
       - [X] 变量作用域
       - [X] 变量提升
         自动提升变量的声明，不会提升赋值
       - [X] 全局作用域
         全局变量被绑定到 window
         #+BEGIN_SRC  javascript
         'use strict';

         var course = 'Learn JavaScript';
         alert(course); // 'Learn JavaScript'
         alert(window.course); // 'Learn JavaScript'

         #+END_SRC
       - [X] 名字空间,减少函数或变量名冲突
       - [X] 局部作用域
          for 循环中的 i 在 for 外面也可以引用
       - [X] 常量
     - [X] 方法
       - [X] apply 函数本身的 apply 方法,可以绑定到某个对象
       - [X] 装饰器
     - [X] 高阶函数
       - [X] map/reduce
       - [X] filter
       - [X] sort
         - 默认把元素转成 string 再排序
         - sort 会对 arr 进行修改,返回原对象 
     - [X] 闭包
       - [X] 函数作为返回值
       - [X] 闭包
       - [X] 闭包的功能
         - 换句话说，闭包就是携带状态的函数，并且它的状态可以完全对外隐藏起来
         - 多参函数变成单参函数 
     - [X] 箭头函数
       - [X] this
     - [ ] generator
   - [ ] 标准对象
   - [ ] 面向对象编程
   - [ ] 浏览器
   - [ ] jQuery
   - [ ] 错误处理
   - [ ] underscore
   - [-] Nodejs
     - [X] first node program
     - [X] module
       - [X] 深入了解模块原理
     - [X] 基本模块
       - global
       - process
       - [X] fs
         - [X] 异步读取文件
         - [X] 同步读取文件
         - [X] 写文件
         - [X] stat
       - [X] stream
         - read
         - write
         - pipe
       - [X] http
         - [X] http 服务器
         - [X] 文件服务器
       - [X] crypto
         - md5 和 sha1
         - hmac
         - aes
         - diffie-hellman
         - 证书
     - [-] Web 开发
       - [X] koa
         - [X] koa 入门
         - [X] 处理 url
         - [X] 使用 Nunjucks
           - [X] 转义
           - [X] 格式化
           - [X] 简单逻辑
         - [X] 使用 mvc
       - [X] mysql
         - [X] 使用 Sequelize
           - [X] 访问 mysql mysql 驱动
           - [X] ORM
           - [X] 实战
         - [X] 建立 Model
           - [X] model 
           - [X] 数据库配置
       - [X] mocha
         - [X] 编写测试
           - [X] mocha test
         - [X] 异步测试
         - [X] Http 测试 
       - [-] WebSocket
         - [X] 使用 ws
         - [ ] 编写聊天室 
       - [ ] Rest
       - [ ] MVVM
       - [ ] 自动化工具
     - [ ] React
** 6.x 中文文档 
   :LOGBOOK:
   CLOCK: [2017-10-23 周一 14:19]--[2017-10-23 周一 14:37] =>  0:18
   CLOCK: [2017-10-23 周一 12:43]--[2017-10-23 周一 12:54] =>  0:11
   :END:
   - [-] [[https://pinggod.gitbooks.io/nodejs-doc-in-chinese/content/doc/c-and-c-plus-plus-addons.html][c/c++ Addons]]
     - [X] 插件
     - [X] hello world
     - [ ] 构建
     - [ ] 链接到 nodejs 自身的依赖
     - [ ] 使用 require()加载插件
     - [ ] nodejs 本地抽象
     - [ ] 插件实例
       - [ ] 函数参数
       - [ ] 回调函数
       - [ ] 对象工厂
       - [ ] 函数工厂
       - [ ] 包装 c++对象
       - [ ] 包装对象工厂方法
       - [ ] 传递包装对象
       - [ ] AtExit 钩子函数
   - [ ] 
   - [ ] 
   - [ ] 
   - 
** 消息队列
   :LOGBOOK:
   CLOCK: [2017-10-27 周五 14:51]--[2017-10-27 周五 15:08] =>  0:17
   CLOCK: [2017-10-27 周五 12:51]--[2017-10-27 周五 12:54] =>  0:03
   :END:
   - [-] [[http://www.jianshu.com/p/a4d92d0d7e19][基于 nodejs 和 rabbitMQ 搭建消息队列]]
     - [X] 简介
       - [X] 消息队列
       - [X] RabbitMq
       - [X] [[http://www.cnblogs.com/stopfalling/p/5375492.html][应用场景]]
         - [X] 1.异步处理
         - [X] 2.应用解耦
         - [X] 3.流量削锋 秒杀或团抢
         - [X] 4.日志处理
         - [X] 5.消息通讯
           - 点对点,聊天室
     - [ ] 应用
* python
** STARTED [[https://wizardforcel.gitbooks.io/think-python-2e/content/11.html][python tutorial]]
   :LOGBOOK:
   CLOCK: [2016-09-18 周日 12:40]--[2016-09-18 周日 13:05] =>  0:25
   CLOCK: [2016-09-18 周日 11:33]--[2016-09-18 周日 11:58] =>  0:25
   CLOCK: [2016-09-18 周日 10:55]--[2016-09-18 周日 11:22] =>  0:27
   CLOCK: [2016-09-14 周三 09:46]--[2016-09-14 周三 10:20] =>  0:34
   :END:
** STARTED [[http://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000][廖雪峰]]
   :LOGBOOK:
   CLOCK: [2017-07-10 周一 11:06]--[2017-07-10 周一 11:31] =>  0:25 下一节,使用 list 和 tuple
   CLOCK: [2017-03-27 周一 23:26]--[2017-03-27 周一 23:51] =>  0:25
   CLOCK: [2017-03-24 周五 22:04]--[2017-03-24 周五 22:29] =>  0:25
   CLOCK: [2017-03-22 周三 22:36]--[2017-03-22 周三 23:01] =>  0:25
   CLOCK: [2017-03-21 周二 22:36]--[2017-03-21 周二 23:01] =>  0:25
   CLOCK: [2017-03-20 周一 23:49]--[2017-03-21 周二 00:14] =>  0:25
   CLOCK: [2017-03-19 周日 22:14]--[2017-03-19 周日 22:39] =>  0:25
   CLOCK: [2017-03-18 周六 22:45]--[2017-03-18 周六 23:10] =>  0:25
   CLOCK: [2017-03-15 周三 22:52]--[2017-03-15 周三 23:17] =>  0:25
   CLOCK: [2017-03-15 周三 22:20]--[2017-03-15 周三 22:45] =>  0:25
   CLOCK: [2017-03-14 周二 23:25]--[2017-03-14 周二 23:50] =>  0:25
   CLOCK: [2017-03-14 周二 22:52]--[2017-03-14 周二 23:17] =>  0:25
   CLOCK: [2017-03-14 周二 13:21]--[2017-03-14 周二 13:46] =>  0:25
   CLOCK: [2017-03-14 周二 12:21]--[2017-03-14 周二 12:30] =>  0:09
   CLOCK: [2017-03-06 周一 13:11]--[2017-03-06 周一 13:36] =>  0:25
   CLOCK: [2017-01-24 周二 19:43]--[2017-01-24 周二 20:08] =>  0:25
   CLOCK: [2016-12-12 周一 22:55]--[2016-12-12 周一 23:20] =>  0:25
   CLOCK: [2016-09-24 周六 12:59]--[2016-09-24 周六 13:25] =>  0:26
   CLOCK: [2016-09-24 周六 11:58]--[2016-09-24 周六 12:09] =>  0:11
   CLOCK: [2016-09-22 周四 14:55]--[2016-09-22 周四 15:20] =>  0:25 匿名函数
   CLOCK: [2016-09-21 周三 09:16]--[2016-09-21 周三 09:41] =>  0:25 迭代器
   CLOCK: [2016-09-20 周二 14:26]--[2016-09-20 周二 14:51] =>  0:25 列表生成式
   CLOCK: [2016-09-20 周二 13:27]--[2016-09-20 周二 13:53] =>  0:26
   :END:
** STARTED django
   :LOGBOOK:
   CLOCK: [2017-06-30 周五 11:09]--[2017-06-30 周五 11:34] =>  0:25
   :END:
*** DONE 上传图片到七牛云
    CLOSED: [2017-07-01 周六 18:49]
    - State "DONE"       from "STARTED"    [2017-07-01 周六 18:49]
    - State "STARTED"    from "DONE"       [2017-07-01 周六 17:21]
    - State "DONE"       from "STARTED"    [2017-06-30 周五 15:14]
    :LOGBOOK:
    CLOCK: [2017-07-01 周六 17:21]--[2017-07-01 周六 18:47] =>  1:26
    CLOCK: [2017-06-30 周五 13:56]--[2017-06-30 周五 14:21] =>  0:25
    CLOCK: [2017-06-30 周五 12:50]--[2017-06-30 周五 13:15] =>  0:25
    :END:
*** 获取七牛返回的值，保存到数据库
** [[http://www.pythondoc.com/flask-mega-tutorial/index.html][flask]]
   :LOGBOOK:
   CLOCK: [2017-09-01 周五 16:07]--[2017-09-01 周五 16:32] =>  0:25
   CLOCK: [2017-08-31 周四 17:52]--[2017-08-31 周四 18:17] =>  0:25
   CLOCK: [2017-08-29 周二 10:59]--[2017-08-29 周二 11:24] =>  0:25
   CLOCK: [2017-08-21 一 23:29]--[2017-08-21 一 23:54] =>  0:25
   :END:
* AI
** [[https://www.youtube.com/watch?v=6sxrxYj3kvg&index=15&list=PLAwxTw4SYaPnbDacyrK_kB_RUkuxQBlCm][computer vision]]
   :LOGBOOK:
   CLOCK: [2017-11-09 周四 02:34]--[2017-11-09 周四 02:59] =>  0:25
   CLOCK: [2017-11-01 周三 01:27]--[2017-11-01 周三 01:52] =>  0:25
   CLOCK: [2017-10-28 周六 19:22]--[2017-10-28 周六 19:47] =>  0:25
   CLOCK: [2017-10-27 周五 16:45]--[2017-10-27 周五 17:10] =>  0:25
   CLOCK: [2017-10-26 周四 23:43]--[2017-10-27 周五 00:08] =>  0:25
   CLOCK: [2017-10-26 周四 15:23]--[2017-10-26 周四 15:48] =>  0:25
   CLOCK: [2017-10-26 周四 00:18]--[2017-10-26 周四 00:43] =>  0:25
   CLOCK: [2017-10-24 周二 00:42]--[2017-10-24 周二 01:07] =>  0:25
   CLOCK: [2017-03-02 周四 22:23]--[2017-03-02 周四 22:48] =>  0:25
   CLOCK: [2017-02-08 周三 12:07]--[2017-02-08 周三 12:32] =>  0:25
   CLOCK: [2017-02-06 周一 11:51]--[2017-02-06 周一 12:16] =>  0:25
   CLOCK: [2017-02-05 周日 12:59]--[2017-02-05 周日 13:24] =>  0:25
   CLOCK: [2017-01-25 周三 21:05]--[2017-01-25 周三 21:30] =>  0:25
   CLOCK: [2017-01-25 周三 18:59]--[2017-01-25 周三 19:24] =>  0:25
   CLOCK: [2017-01-25 周三 18:26]--[2017-01-25 周三 18:31] =>  0:05
   CLOCK: [2017-01-25 周三 10:10]--[2017-01-25 周三 10:35] =>  0:25
   CLOCK: [2017-01-24 周二 21:32]--[2017-01-24 周二 21:57] =>  0:25
   :END:
   - [X] course overview
   - [-] topic outline
     - [-] introduction
       - [X] intro
         - [X] images as functions1
         - [X] images as functions2
         - [X] the real phyllis
         - [X] digital images 26
         - [X] matlab images are Matrices
         - [X] load and display an image
         - [X] inspect image values
         - [X] crop an image
         - [X] color planes
         - [X] add two images demo
         - [X] multiply by a scale demo 33
         - [X] common types of noise
         - [X] image difference demo
         - [X] Generate Gaussian Noise
         - [X] effect of sigma on gussian noise //back
         - [X] displaying images in matlab
       - [-] intro filter and noise
         - [X] gaussian noise -how remove noise
         - [X] averaging assumptions
         - [X] weighted moving average
         - [X] moving averag in 2d 44
         - [X] correlation filtering
         - [X] averaging filter
         - [X] Gaussian filter
         - [X] Variance or Standard Deviation 48
         - [X] matlab
         - [X] keeping the two gaussian straight
         - [ ] end
       - [ ] intro 52
         - [ ] impulse function and response
           - [ ] [[https://zh.wikipedia.org/wiki/%E7%B7%9A%E6%80%A7%E9%97%9C%E4%BF%82][线性关系]]
             - [ ] 
     - [ ] image processing for computer vision
     - [ ] camera models and views
     - [ ] features and matching
     - [ ] lightness and brightness
     - [ ] motion and tracking
     - [ ] miscellaneous
     - [ ] human vision
   - [X] course details
   - [X] software
** [[http://opencv-python-tutroals.readthedocs.io/en/latest/py_tutorials/py_tutorials.html][openCV_PyTutorials]]
** [[https://www.youtube.com/results?search_query=udacity+artificial+intelligence][udacity-artifical-intiligence]]
   :LOGBOOK:
   CLOCK: [2017-04-19 周三 23:25]--[2017-04-19 周三 23:50] =>  0:25
   :END:
** ml
   :LOGBOOK:
   CLOCK: [2017-12-12 周二 01:28]--[2017-12-12 周二 01:53] =>  0:25
   :END:
* MongoDB
** STARTED [[http://www.runoob.com/mongodb/mongodb-relationships.html][简单教程]]
   :LOGBOOK:
   CLOCK: [2016-09-13 周二 16:16]--[2016-09-13 周二 16:48] =>  0:32
   :END:
* 计算机
** [[http://scse.buaa.edu.cn/buaa-css-web/articleDetail.action;jsessionid=DBFB2A8FE1CD0441D85FC0F7057D0C83?articleId=2bff0a2e-f114-4853-9bd3-dd6515a98bff&type=NEWS&firstSelId=6e011b46-2c70-4f68-a633-ec51f42b4718&secondSelId=NOTICE_PUBLICITY&language=0][专业课大纲]]
** [[https://www.coursera.org/learn/unity-yinqing-youxi-kaifa/lecture/xlbGz/ben-men-ke-cheng-jie-shao][Unity 开发基础]]
   :LOGBOOK:
   CLOCK: [2017-10-17 周二 15:36]--[2017-10-17 周二 16:01] =>  0:25
   CLOCK: [2017-10-09 周一 16:58]--[2017-10-09 周一 17:23] =>  0:25
   CLOCK: [2017-10-08 周日 20:17]--[2017-10-08 周日 20:42] =>  0:25
   CLOCK: [2017-10-07 周六 18:49]--[2017-10-07 周六 19:14] =>  0:25
   CLOCK: [2017-10-06 周五 18:14]--[2017-10-06 周五 18:39] =>  0:25
   CLOCK: [2017-10-05 周四 22:50]--[2017-10-05 周四 23:15] =>  0:25
   CLOCK: [2017-10-04 周三 22:20]--[2017-10-04 周三 22:45] =>  0:25
   CLOCK: [2017-10-03 周二 15:52]--[2017-10-03 周二 16:17] =>  0:25
   CLOCK: [2017-10-01 周日 01:21]--[2017-10-01 周日 01:46] =>  0:25
   CLOCK: [2017-09-28 四 21:48]--[2017-09-28 四 22:13] =>  0:25
   CLOCK: [2017-09-27 周三 18:12]--[2017-09-27 周三 18:37] =>  0:25
   CLOCK: [2017-09-25 周一 16:19]--[2017-09-25 周一 16:44] =>  0:25
   CLOCK: [2017-09-22 五 23:23]--[2017-09-22 五 23:48] =>  0:25
   CLOCK: [2017-09-22 周五 15:16]--[2017-09-22 周五 15:41] =>  0:25
   CLOCK: [2017-09-20 三 10:59]--[2017-09-20 三 11:24] =>  0:25
   CLOCK: [2017-09-18 周一 16:29]--[2017-09-18 周一 16:54] =>  0:25
   CLOCK: [2017-09-17 日 18:46]--[2017-09-17 日 19:11] =>  0:25
   CLOCK: [2017-09-11 一 22:30]--[2017-09-11 一 22:55] =>  0:25
   CLOCK: [2017-09-10 日 17:31]--[2017-09-10 日 17:56] =>  0:25
   CLOCK: [2017-03-24 周五 22:42]--[2017-03-24 周五 23:07] =>  0:25
   CLOCK: [2017-03-19 周日 23:17]--[2017-03-19 周日 23:42] =>  0:25
   CLOCK: [2017-03-18 周六 23:40]--[2017-03-19 周日 00:05] =>  0:25
   CLOCK: [2017-03-10 周五 23:43]--[2017-03-11 周六 00:08] =>  0:25
   CLOCK: [2017-03-09 周四 22:35]--[2017-03-09 周四 23:00] =>  0:25
   CLOCK: [2017-03-08 周三 22:37]--[2017-03-08 周三 23:02] =>  0:25
   :END:
*** 第二周
    - [X] 物理系统与图形系统
      - [X] 光源
      - [X] 摄像机
    - [X] 音频与项目部署
      - [X] 音频
      - [X] 项目部署 pc&移动
*** 第三周 c#
    - [X] 简介&集成开发环境
    - [X] 基本语法
      - [X] 基本语法结构
      - [X] 变量与表达式
      - [X] 流程控制
    - [X] 变量进阶与函数
      - [X] 值类型和引用类型
    - [X] 面向对象
      - [X] 面向对象的含义
      - [X] 面向对象的技术
      - [X] 类的定义与使用
    - 
*** 第四周 MoocHero
    - [X] c#编写 unity 脚本
      - [X] 骨牌脚本讲解
    - [X] 概述
    - [X] 地形系统
    - [X] 动画系统
      - [X] 动画片段与角色替身
        - [X] Mecamim workflow
          - [X] 资源的导入 
          - [X] 角色的建立 一般角色与人形角色
            - [X] Avatar 角色替身
          - [X] 角色的运动 
            - [X] 设定动画片段,动画片段间的交互,建立状态机,混合树
              - [X] Animation Clip 动画片段,行走,奔跑,跳跃
              - [X] 分割 Animation Clip
              - [X] Animation Clip 首尾一致检查
                - [X] 姿势一致
                - [X] Rotation
                - [X] 首尾 Position Y 轴分量的一致检查
                - [X] xz 轴分量一致性检查
            - [X] 调整动画参数或代码,控制动画 
      - [X] 动画状态机
        - [X] Animator 组件 控制对象的动画 包括建立状态机,调整动画参数,及代码控制动画
        - [X] Animator Controller 动画控制器用来管理某对象一系列动画片段
          - [X] Animation state Machine 状态机
          - [X] Animation Layer & Avatar Mask 管理不同身体部位的动画
      - [X] 动画层与身体遮罩
        - [X] Animation Layer & Avatar Mask 用户合成身体不同部位的动画
        - [X] Animation Layer 动画层来管理不同部位的动画
        - [X] Avatar Mask 可以启用或禁用相关关节的动画
    - [X] 游戏逻辑-玩家与敌人
      - [X] 玩家的移动控制
        - [X] 移动
        - [X] 跳跃
        - [X] 摄像机行为
      - [X] 玩家的生命值与射击
      - [X] 敌人的追踪逻辑
      - [X] 敌人的生命值.分数与攻击行为
    - [X] 游戏逻辑-游戏管理
      - [X] 游戏管理器 
      - [X] 敌人的自动生成
    - [ ] 总结
*** 第五周 unity 高级特性与移动平台开发
    :LOGBOOK:
    CLOCK: [2017-10-11 周三 16:08]--[2017-10-11 周三 16:33] =>  0:25
    :END:
    - [X] 游戏人称变换
    - [X] 概述
    - [X] 图形用户界面与移动平台界面
      - [X] uGUI 画布与锚点
        - Canvas 和 EventSystem
      - [X] uGUI 控件
      - [X] 开始,进,结束界面制作
      - [X] 移动平台 UI 设置
        - 使用 Input 的输入函数
        - 使用 Cross Platform Input 资源包
    - [ ] 粒子系统与线渲染器
      - [ ] 粒子系统
      - [ ] 线渲染器
    - [ ] 物品收集，游戏胜利与失败画面
    - [ ] 完整版总结
** [[https://www.coursera.org/learn/unity-kaifa-jinjie/home/welcome][Unity 开发进阶]]
   - [ ] week1 可玩性提升
     - [ ] 概述
     - [ ] Unity 导航系统
     - [ ] 僵尸 AI
     - [ ] 逆向动力学
   - [ ] week2 游戏画面品质提升
     - [ ] Unity 三维场景渲染
     - [ ] 光照进阶
     - [ ] 全局光照
     - [ ] 着色器
     - [ ] 图像特效
   - [ ] week3 游戏性能优化
     - [ ] 概述
     - [ ] 性能分析工具
     - [ ] 性能优化
     - [ ] Quality 质量设置
     - [ ] 总结
   - [ ] week4 Phonton 网络引擎与网络游戏大厅制作
     - [ ] 网络游戏开发与课程项目
     - [ ] Photon 网络引擎
     - [ ] pun 基本架构
     - [ ] pun 制作网络游戏大厅
   - [ ] week5 Phonton 实现网络游戏逻辑
     - [ ] pun 与网络游戏逻辑
     - [ ] 网络游戏开始准备与玩家对象生成
     - [ ] 网络游戏玩家的行为逻辑
     - [ ] 游戏状态管理与场景收集物
     - [ ] 网络游戏项目构建
** 算法 目录 12
   :LOGBOOK:
   CLOCK: [2017-12-11 周一 00:25]--[2017-12-11 周一 00:50] =>  0:25
   CLOCK: [2017-12-01 周五 22:27]--[2017-12-01 周五 22:52] =>  0:25
   CLOCK: [2017-11-16 周四 20:33]--[2017-11-16 周四 20:58] =>  0:25
   CLOCK: [2017-11-13 周一 22:44]--[2017-11-13 周一 23:09] =>  0:25
   CLOCK: [2017-11-12 周日 14:56]--[2017-11-12 周日 15:21] =>  0:25
   CLOCK: [2017-11-10 周五 20:36]--[2017-11-10 周五 21:01] =>  0:25
   CLOCK: [2017-11-08 周三 01:51]--[2017-11-08 周三 02:16] =>  0:25
   CLOCK: [2017-11-02 周四 19:37]--[2017-11-02 周四 20:02] =>  0:25
   CLOCK: [2017-10-28 周六 12:53]--[2017-10-28 周六 13:18] =>  0:25
   CLOCK: [2017-09-19 周二 11:07]--[2017-09-19 周二 11:32] =>  0:25
   CLOCK: [2017-09-18 周一 17:04]--[2017-09-18 周一 17:29] =>  0:25
   :END:
*** 基础
   - [X] 基础编程模型
     - [X] api 30
     - [X] 字符串
     - [X] 输入输出 35
     - [X] 二分查找 42
   - [-] 1.2 数据抽象
     - [X] 1.2.1 使用抽象数据类型
       - [X] 1.抽象数据类型的 api
       - [X] 2.继承的方法 toString()
       - [X] 3.用例代码
       - [X] 4.对象
       - [X] 9.对象作为参数 java 是引用传递 56
       - [X] 10.对象作为返回值 返回引用
       - [X] 11.数组也是对象
       - [X] 12.对象的数组 是由对象引用构成的数组
     - [-] 1.2.2 抽象数据类型举例
       - [X] 1.几何对象 59
       - [ ] 2.信息处理 61
     - [-] 1.2.3 抽象数据类型的实现
       - [X] 1.实例变量
       - [X] 2.构造函数
       - [ ] 3.实例方法
       - [ ] 4.作用域
       - [ ] 5.api 用例与实现
   - [X] 1.3 背包队列和栈
     - 目标 1.集合中对象的表示方式会影响集合操作的效率
     - 目标 2.泛型和迭代
     - 目标 3.链式数据结构的重要性
     - [X] 1.3.1 api
       - [X] 泛型
       - [X] 自动装箱
       - [X] 可迭代的集合类型
       - [X] 背包
       - [X] 队列
       - [X] 下压栈
       - [X] 算术表达式求值
     - [X] 1.3.2 集合类数据类型的实现
       - [X] 1.定容栈
       - [X] 2.泛型
       - [X] 3.调整数组大小
       - [X] 4.对象游离
       - [X] 5.迭代
     - [X] 1.3.3 链表
       - [X] 1.节点记录
       - [X] 2.构造链表
       - [X] 3.在表头插入节点
       - [X] 4.从表头删除节点
       - [X] 5.表尾插入节点
       - [X] 6.其他位置的插入和删除操作
       - [X] 7.遍历
       - [X] 8.栈的实现
       - [X] 9.队列的实现
       - [X] 10.背包的实现
     - [X] 1.3.4 综述
   - [-] 1.4 算法分析
     - [X] 1.科学方法
     - [X] 2.观察
     - [X] 3.数学模型
       - [X] 1.近似
       - [X] 2.近似运行时间
       - [X] 3.对增长数量级的猜想
       - [X] 4.算法的分析
       - [X] 5.成本模型
       - [X] 6.总结
     - [X] 4.增长数量级的分类
     - [X] 5.设计更快的算法
     - [ ] 6.倍率实验

*** 排序
*** 查找
*** 图
*** 字符串
*** 算法
    - [X] 1.1 下压栈 140
    - [X] 1.2 下压堆栈 148
    - [ ] 1.3 先进先出队列 150
** unix 编程艺术 
   :LOGBOOK:
   CLOCK: [2017-11-18 六 20:49]--[2017-11-18 六 21:14] =>  0:25
   CLOCK: [2017-11-13 周一 23:39]--[2017-11-14 周二 00:04] =>  0:25
   CLOCK: [2017-11-12 周日 18:38]--[2017-11-12 周日 19:03] =>  0:25
   :END:
   - [X] 4. 
     - [X] 4.3 软件是多层的
       - [X] 1.自顶向下和自底向上
       - [X] 2.胶合层
       - [X] 3.c 语言
     - [X] 4.4 程序库
     - [X] 4.5 unix 和面向对象语言
     - [X] 4.6 模块式编码
   - [ ] 5.文本化,好协议产生好实践
     - [ ] 5.1 文本化的重要性
** 数学 
   - [ ] [[http://mp.weixin.qq.com/s/bYcZRGFT4qavlJ2IUcGYZg][拓扑变换]]
* khan
  :LOGBOOK:
  CLOCK: [2017-04-13 周四 00:07]--[2017-04-13 周四 00:32] =>  0:25
  :END:
* [[http://blog.chengyunfeng.com/?p=1032][动态 version]]
* [[https://www.youtube.com/results?search_query=udacity+artificial+intelligence][udacityAiRobotics]]
  :LOGBOOK:
  CLOCK: [2017-07-18 周二 23:50]--[2017-07-19 周三 00:15] =>  0:25
  CLOCK: [2017-07-17 周一 15:45]--[2017-07-17 周一 16:10] =>  0:25 下一集 70
  CLOCK: [2017-07-10 周一 18:09]--[2017-07-10 周一 18:31] =>  0:22
  CLOCK: [2017-07-09 周日 23:10]--[2017-07-09 周日 23:35] =>  0:25 下一集 66
  CLOCK: [2017-07-06 周四 00:17]--[2017-07-06 周四 00:42] =>  0:25 下一集 58
  CLOCK: [2017-07-03 周一 13:40]--[2017-07-03 周一 14:05] =>  0:25 下一集 40
  CLOCK: [2017-07-03 周一 12:22]--[2017-07-03 周一 12:47] =>  0:25 下一集 32
  CLOCK: [2017-07-01 周六 18:57]--[2017-07-01 周六 19:22] =>  0:25
  CLOCK: [2017-06-30 周五 22:39]--[2017-06-30 周五 23:04] =>  0:25 下一集 14
  CLOCK: [2017-04-28 周五 22:56]--[2017-04-28 周五 23:21] =>  0:25
  CLOCK: [2017-04-27 周四 23:17]--[2017-04-27 周四 23:42] =>  0:25 58 贝叶斯
  CLOCK: [2017-04-26 周三 23:24]--[2017-04-26 周三 23:49] =>  0:25 46
  CLOCK: [2017-04-21 周五 23:19]--[2017-04-21 周五 23:44] =>  0:25
  :END:
* [[http://www.cnblogs.com/holbrook/archive/2012/04/12/2444992.html][org-mode]]
  :LOGBOOK:
  CLOCK: [2017-08-22 二 00:35]--[2017-08-22 二 01:00] =>  0:25
  :END:
** [[http://www.cnblogs.com/Open_Source/archive/2011/07/17/2108747.html#sec-7][简明手册]]
* book
** 未来简史
   :LOGBOOK:
   CLOCK: [2017-08-22 周二 10:34]--[2017-08-22 周二 10:59] =>  0:25
   :END:
** 人类简史
   :LOGBOOK:
   CLOCK: [2017-09-21 周四 14:58]--[2017-09-21 周四 15:23] =>  0:25
   :END:
* c,c++
  :LOGBOOK:
  CLOCK: [2017-10-22 周日 00:08]--[2017-10-22 周日 00:33] =>  0:25
  CLOCK: [2017-09-19 周二 16:33]--[2017-09-19 周二 16:58] =>  0:25
  :END:
** [[http://www.runoob.com/cprogramming/c-tutorial.html][c]][29%]
   :LOGBOOK:
   CLOCK: [2017-12-10 周日 02:11]--[2017-12-10 周日 02:36] =>  0:25
   CLOCK: [2017-10-21 周六 16:34]--[2017-10-21 周六 16:59] =>  0:25
   CLOCK: [2017-10-19 周四 12:03]--[2017-10-19 周四 12:28] =>  0:25
   CLOCK: [2017-09-01 周五 15:13]--[2017-09-01 周五 15:38] =>  0:25
   CLOCK: [2017-09-05 二 21:00]--[2017-09-05 二 21:25] => 0:25
   :END:
   :LOGBOOK:
   - [X] 指针
     - [X] 内存地址的访问 &
     - [X] 什么是指针
       - 声明方式 type *varname
     - [X] 如何使用
     - [X] null 指针
       #+BEGIN_SRC c 
         int *ptr=NULL
         //ptr=0
       #+END_SRC
     - [X] c 指针详解
       - [X] [[http://www.runoob.com/cprogramming/c-pointer-arithmetic.html][指针的算术运算符]]
         - [X] ++ 
         - [X] --
         - [X] 比较
       - [X] [[http://www.runoob.com/cprogramming/c-array-of-pointers.html][指针数组]]
       - [X] [[http://www.runoob.com/cprogramming/c-pointer-to-pointer.html][指向指针的指针]]
       - [X] [[http://www.runoob.com/cprogramming/c-passing-pointers-to-functions.html][传递指针给函数]]
       - [X] [[http://www.runoob.com/cprogramming/c-return-pointer-from-functions.html][从函数返回指针]]
   - [X] 函数指针与回调函数
     - [X] 函数指针
     - [X] 回调函数
   - [ ] C 字符串
   - [X] C 结构体
     - [X] 访问结构成员
     - [X] 结构作为函数参数
     - [X] 指向结构的指针
     - [X] 位域
   - [X] C 共用体
     - [X] 定义共用体
     - [X] 访问共用体成员
   - [X] C 位域
   - [ ] c typedef
   - [ ] c 输入输出
   - [ ] 文件读写
   - [ ] 预处理器
   - [ ] 头文件
   - [ ] 强制类型转换
   - [ ] 错误处理
   - [ ] 递归
   - [ ] 可变参数
   - [ ] 内存管理
   - [ ] 命令行参数
** [[http://www.runoob.com/cplusplus/cpp-tutorial.html][c++]]
  :LOGBOOK:
  CLOCK: [2017-10-24 周二 13:36]--[2017-10-24 周二 14:01] =>  0:25
  CLOCK: [2017-09-20 周三 18:23]--[2017-09-20 周三 18:36] =>  0:13
  CLOCK: [2017-09-14 周四 12:20]--[2017-09-14 周四 12:31] =>  0:11
  CLOCK: [2017-09-06 周三 10:05]--[2017-09-06 周三 10:30] =>  0:25
  CLOCK: [2017-09-04 一 11:34]--[2017-09-04 一 11:59] =>  0:25
  CLOCK: [2017-09-01 周五 14:38]--[2017-09-01 周五 15:03] =>  0:25
  CLOCK: [2017-08-31 周四 14:13]--[2017-08-31 周四 14:38] =>  0:25
  CLOCK: [2017-08-29 周二 10:17]--[2017-08-29 周二 10:42] =>  0:25
  CLOCK: [2017-08-28 一 22:51]--[2017-08-28 一 23:16] =>  0:25
  CLOCK: [2017-08-28 周一 00:32]--[2017-08-28 周一 00:57] =>  0:25
  CLOCK: [2017-08-27 周日 11:11]--[2017-08-27 周日 11:36] =>  0:25
  CLOCK: [2017-08-26 周六 20:56]--[2017-08-26 周六 21:22] =>  0:26
  CLOCK: [2017-08-26 周六 00:25]--[2017-08-26 周六 00:50] =>  0:25
  :END:
   - [X] c++数据类型
     - [X] 基本的内置类型
     - [X] typedef 声明 为已有类型取新的名字
     - [X] 枚举
   - [X] c++变量类型
     - [X] 变量定义
     - [X] 变量声明
     - [X] 左值和右值
   - [X] 变量的作用域
     - [X] 局部变量
     - [X] 全局变量 会自动初始化
     - [X] 初始化局部变量和全局变量
   - [X] 常量
     - [X] 整数
     - [X] 浮点
     - [X] 布尔
     - [X] 字符
     - [X] 字符串常量
     - [X] 定义常量
       - [X] #define 预处理
       - [X] const 关键字
   - [X] 修饰符类型
     signed unsigned long short
     - [X] 类型限定符
       const restrict volatile
   - [X] c++引用
     - 把引用作为参数
     - 引用作为返回值
   - [X] c++命名空间
   - [ ] 模板
     函数模板
     类模板
   - [ ] web 编程
   - 
* cocos
** [[http://blog.sina.com.cn/s/blog_4057ab62010197z8.html][module import android.mk]]
* [[https://qbgbook.gitbooks.io/spring-boot-reference-guide-zh/content/][spring boot]]
  - [X] 13 构建系统
    - [X] gradle
    - [X] [[https://qbgbook.gitbooks.io/spring-boot-reference-guide-zh/content/III.%20Using%20Spring%20Boot/13.5.%20Starters.html][starters 列表]]
  - [-] 14 组织代码
    - [X] 使用 defalut 包
    - [ ] 放置应用的 main 类
  :LOGBOOK:
  CLOCK: [2017-09-06 周三 13:32]--[2017-09-06 周三 13:57] =>  0:25
  :END:
* socket  
- [ ] [[http://www.cnblogs.com/hellojava/archive/2013/01/25/2861127.html][循序渐进 socket 编程 java]] -
* [[https://yeasy.gitbooks.io/blockchain_guide/content/][区块链技术指南]]
  :LOGBOOK:
  CLOCK: [2017-10-08 周日 23:29]--[2017-10-08 周日 23:54] =>  0:25
  :END:
  - [X] 概念
    - [X] 数字货币
    - [X] 比特币
    - [X] 区块链核心概念
    - [X] 小结
  - [-] 区块链技术的价值,挑战与展望
    - [X] 商业价值
    - [X] 关键技术与挑战
    - [X] 趋势与展望
    - [ ] 小结
  - [ ] 典型引用场景
  - [ ] 分布式系统核心问题
  - [ ] 密码学与安全技术
  - [ ] 比特币项目
  - [ ] 以太坊 Ethereum
  - [ ] Hyperledger(超级账本)
  - [ ] Fabric 部署与管理
  - [ ] 区块链应用开发
  - [ ] Fabric 架构设计
  - [ ] 区块链即服务
  - [ ] 性能与评测
  - [ ] 附录
* [[http://hp.stuhome.net/index.php/2016/07/06/tensorflow-learning-paths/][learning-path]]
** ml
   :LOGBOOK:
   CLOCK: [2017-10-26 周四 18:11]--[2017-10-26 周四 18:36] =>  0:25
   CLOCK: [2017-10-26 周四 00:58]--[2017-10-26 周四 01:23] =>  0:25
   CLOCK: [2017-10-21 周六 17:20]--[2017-10-21 周六 17:45] =>  0:25
   CLOCK: [2017-10-07 周六 20:51]--[2017-10-07 周六 21:16] =>  0:25
   CLOCK: [2017-10-06 周五 20:08]--[2017-10-06 周五 20:33] =>  0:25
   :END:
   - [-] [[http://neuralnetworksanddeeplearning.com/chap1.html][chap1 recognize handwritten digits]]
     - [X] [[http://neuralnetworksanddeeplearning.com/chap1.html#perceptrons][Perceptrons]]
     - [-] [[http://neuralnetworksanddeeplearning.com/chap1.html#sigmoid_neurons][Sigmoid neurons]]
       - [-] [[https://zh.wikipedia.org/wiki/%E5%BE%AE%E7%A7%AF%E5%88%86%E5%AD%A6][calculus]]
         - [-] 主要概念
           - [X] 极限和无穷小
           - [X] 导数
           - [X] 微分学
           - [ ] 莱布尼茨记号
           - [ ] 积分学
           - [ ] 微积分基本定理
* 量子计算
  - [ ] [[https://www.zhihu.com/question/26933442][zhihu]]
* Dart
** [[https://codelabs.developers.google.com/codelabs/from-java-to-dart/index.html#1][Intro to Dart for java developers]]
   :LOGBOOK:
   CLOCK: [2017-10-17 周二 14:20]--[2017-10-17 周二 14:45] =>  0:25
   CLOCK: [2017-10-16 周一 11:00]--[2017-10-16 周一 11:25] =>  0:25
   CLOCK: [2017-10-15 周日 23:40]--[2017-10-16 周一 00:05] =>  0:25
   CLOCK: [2017-10-15 周日 22:33]--[2017-10-15 周日 22:58] =>  0:25
   :END:
   - [X] introduction
   - [X] create a simple Dart class
   - [X] Use optional parameters(instead of overloading)
   - [X] Create a factory
   - [X] Implement a interface
   - [X] Use Dart for functional programming
   - [-] Congratulations
     - [ ] async/await
     - [X] method cascade
     - [X] null aware operators 
   - [-] learn more
** [[https://www.dartlang.org/guides/language/language-tour][language tour]]
   :LOGBOOK:
   CLOCK: [2017-11-01 周三 00:18]--[2017-11-01 周三 00:43] =>  0:25
   :END:
   - [ ] important concepts
   - [ ] keywords
   - [ ] variables
   - [ ] built-int types
   - [ ] functions
   - [ ] operators
   - [ ] control flow statements
   - [ ] exceptions
   - [-] classes
     - [X] instance variables
     - [-] constructors
       - [X] named constructors
       - [ ] invoking a non-default superclass constructor
       - [ ] 
   - [ ] Generics
   - [ ] Libraries and visibility
   - [ ] asynchrony support
   - [ ] callable classes
   - [ ] isolates
   - [ ] typedefs
   - [ ] metadata
   - [ ] comments
   - [ ] summary
** BuildUi
   :LOGBOOK:
   CLOCK: [2017-10-22 周日 14:53]--[2017-10-22 周日 15:18] =>  0:25
   CLOCK: [2017-10-22 周日 13:11]--[2017-10-22 周日 13:36] =>  0:25
   CLOCK: [2017-10-22 周日 00:58]--[2017-10-22 周日 01:23] =>  0:25
   CLOCK: [2017-10-21 周六 23:09]--[2017-10-21 周六 23:34] =>  0:25
   CLOCK: [2017-10-21 周六 18:08]--[2017-10-21 周六 18:33] =>  0:25
   CLOCK: [2017-10-21 周六 15:52]--[2017-10-21 周六 16:17] =>  0:25
   CLOCK: [2017-10-21 周六 01:52]--[2017-10-21 周六 02:17] =>  0:25
   CLOCK: [2017-10-17 周二 12:02]--[2017-10-17 周二 12:27] =>  0:25
   :END:
   - [-] [[https://flutter.io/widgets-intro/][tour of the widget framework]]
     - [X] intro
     - [X] hello world
     - [ ] basic widget
       - [ ] [[https://flutter.io/widgets/layout/][ layout widgets]]
         - single-child
         - multi-child
     - [-] using material design
       - [ ] [[https://flutter.io/widgets/material/][material-design widgets]]
       - [X] [[https://docs.flutter.io/flutter/widgets/Navigator-class.html][navigator]]
         - [X] displaying a full-screen route
         - [X] Using named navigator routes
         - [X] Routes can return a value
         - [X] Pop routes
         - [X] Custom routes 
     - [X] handling gestures [[https://flutter.io/gestures/][gestures in flutter]]
     - [X] changing widgets in response to input [[https://docs.flutter.io/flutter/widgets/StatefulWidget-class.html][stateful widget]]
     - [X] bring it all together
     - [X] Responding to widget lifecycle events
     - [X] keys [[https://docs.flutter.io/flutter/widgets/Key-class.html][key]]
     - [X] GlobalKeys
   - [ ] widgetCatlog
   - [ ] sampleCatlog
   - [ ] building beautiful ui codelabs
   - [ ] buildlayouts
   - [ ] add interactivity
** UserDevice and sdk api
   :LOGBOOK:
   CLOCK: [2017-10-26 周四 16:07]--[2017-10-26 周四 16:32] =>  0:25
   CLOCK: [2017-10-23 周一 01:19]--[2017-10-23 周一 01:44] =>  0:25
   CLOCK: [2017-10-23 周一 00:42]--[2017-10-23 周一 01:07] =>  0:25
   :END:
   - [ ] using packages
   - [ ] developing packages
   - [X] platform-specific code
     - [X] Architectural overview:platform channels
       - [X] platform data type support and codecs
     - [X] Example:call android or ios code use channels
       - [X] step1 create a new project
       - [X] step2 create flutter platform client
       - [X] step3a add android code
       - [X] Separate platform-specific code from UI code
       - [X] publish as a package
       - [X] custom channels and codecs
   - [X] read and write files
     - [X] introduction
     - [X] example
   - [X] network and http
     - [X] using http packages
     - [X] making http request
     - [X] decoding and encoding json
     - [X] example:decoding json from https get
     - [X] api docs
   - [ ] Firebase for Flutter codelab
* [[http://www.runoob.com/docker/docker-tutorial.html][Docker]]
  :LOGBOOK:  
  CLOCK: [2017-11-19 周日 12:14]--[2017-11-19 周日 15:29] =>  3:15
  CLOCK: [2017-11-09 周四 22:33]--[2017-11-09 周四 22:58] =>  0:25
  CLOCK: [2017-11-09 周四 17:42]--[2017-11-09 周四 18:07] =>  0:25
  CLOCK: [2017-11-09 周四 15:41]--[2017-11-09 周四 16:06] =>  0:25
  CLOCK: [2017-11-09 周四 01:55]--[2017-11-09 周四 02:20] =>  0:25
  CLOCK: [2017-11-05 周日 01:35]--[2017-11-05 周日 02:00] =>  0:25
  CLOCK: [2017-11-04 周六 14:47]--[2017-11-04 周六 15:12] =>  0:25
  CLOCK: [2017-11-04 周六 14:06]--[2017-11-04 周六 14:31] =>  0:25
  CLOCK: [2017-11-04 周六 12:13]--[2017-11-04 周六 12:38] =>  0:25
  CLOCK: [2017-11-03 周五 13:42]--[2017-11-03 周五 14:07] =>  0:25
  CLOCK: [2017-11-02 周四 16:32]--[2017-11-02 周四 16:57] =>  0:25
  CLOCK: [2017-11-02 周四 14:08]--[2017-11-02 周四 14:33] =>  0:25
  CLOCK: [2017-11-02 周四 13:01]--[2017-11-02 周四 13:26] =>  0:25
  CLOCK: [2017-11-02 周四 00:18]--[2017-11-02 周四 00:43] =>  0:25
  CLOCK: [2017-10-31 周二 22:47]--[2017-10-31 周二 23:12] =>  0:25
  CLOCK: [2017-10-30 周一 22:07]--[2017-10-30 周一 22:32] =>  0:25
  CLOCK: [2017-10-30 周一 13:08]--[2017-10-30 周一 13:33] =>  0:25
  CLOCK: [2017-10-30 周一 11:04]--[2017-10-30 周一 11:29] =>  0:25
  CLOCK: [2017-10-29 周日 18:11]--[2017-10-29 周日 18:36] =>  0:25
  CLOCK: [2017-10-29 周日 17:35]--[2017-10-29 周日 18:00] =>  0:25
  CLOCK: [2017-10-29 周日 13:52]--[2017-10-29 周日 14:17] =>  0:25
  CLOCK: [2017-10-29 周日 02:27]--[2017-10-29 周日 02:52] =>  0:25
  CLOCK: [2017-10-28 周六 18:09]--[2017-10-28 周六 18:34] =>  0:25
  CLOCK: [2017-10-28 周六 16:28]--[2017-10-28 周六 16:53] =>  0:25
  CLOCK: [2017-10-28 周六 07:13]--[2017-10-28 周六 15:38] =>  8:25
  CLOCK: [2017-10-28 周六 02:12]--[2017-10-28 周六 02:37] =>  0:25
  CLOCK: [2017-10-28 周六 01:19]--[2017-10-28 周六 01:44] =>  0:25
  CLOCK: [2017-10-27 周五 15:55]--[2017-10-27 周五 16:20] =>  0:25
  :END:
  - [-] [[https://docs.docker.com/get-started/][docs get started]]
    - [X] 1.orientation
      - [X] prerequisites
        - [X] what is docker
      - [X] a brife explanation of containers 
      - [X] containers vs virtual machines
      - [X] setup
    - [-] 2.containers
      - [X] intro
      - [X] your new development environment
      - [X] define a container with a Dockerfile
      - [X] the app itself
      - [X] build the app
      - [X] run app
      - [-] share your image
        - [ ] [[https://docs.docker.com/datacenter/dtr/2.2/guides/][set up own registry]]
        - [X] login with docker id
        - [X] tag the image
        - [X] publish the image
        - [X] pull and run the image from the remote repository
    - [X] 3.services
      - [X] prerequisites
      - [X] introduction
      - [X] about services
      - [X] your first docker-compose.yml
      - [X] run your new load-balanced app
      - [X] scale the app
        - [X] take down the app and the swarm
    - [X] 4.swarms
      - [X] prerequisites
      - [X] introduction
      - [X] understanding swarm clusters
      - [X] set up your swarms
        - [X] create a cluster
          - [X] vms on your local machine
          - [X] list the vms and their ip address
          - [X] initialize the swarm and add nodes
      - [X] deploy your app on the swarm cluster
        - [X] configure a docker-machine shell to the swarm manager
          - [X] docker machine shell environment on windows
        - [X] deploy the app on the swarm manager
        - [X] accessing your cluser 
      - [X] interating and scaling your app
      - [X] cleanup and reboot
        - [X] stacks and swarms
        - [X] unsetting docker-machine shell variable settings
        - [X] restarting docker machines
    - [X] 5.stacks
      - [X] prerequisites
      - [X] introduction
      - [X] add a new service and redeploy
      - [X] persist the data
        - [X] 1.add redis service
        - [X] 2.create ./data directory on the manager
        - [X] 3.make sure your shell configure myvm1
    - [-] deploy your app
      - [X] prerequisites
      - [X] introduction
      - [ ] choose an option
        - [ ] connect docker cloud
        - [ ] create your swarm
        - [ ] deploy your app on a cloud provider
        - [ ] iteration and cleanup
  - [-] [[https://docs.docker.com/samples/][samples]]
    - [X] [[https://github.com/docker/labs/tree/master/beginner/][docker for beginers]]
      - [X] 1.0 running your first container
        - [X] docker run
        - [X] terminology
      - [X] 2.0 webapps with docker
        - [X] run a static website in a container
        - [X] docker images
        - [X] create your first image
          - [X] create a flask app
          - [X] write a docker file
          - [X] run your image
          - [X] dockerfile commands summary
      - [X] 3.0 deploying an app to swarm
        - [X] Voting app
        - [X] 3.1 Deploying the app
        - [X] 3.2 customize the app
          - [X] 1.change the images used
          - [X] 2.redeploy
          - [X] 3.another test run
    - [-] [[https://github.com/docker/labs/tree/master/developer-tools/java/][docker for java developers]]
      - [X] setup environments
      - [-] building
        - [X] build a docker image
          - [X] Dockerfile
          - [X] Create your first image
          - [X] Create your first image using java
            - [X] create a simple java application
            - [X] package and run java app as docker image
            - [X] package and run java app using docker maven plugin
          - [X] Dockerfile command design pattern
            - [X] Difference between CMD and ENTRYPOINT
            - [X] Difference between ADD and COPY
            - [X] Import and export images
        - [-] build a docker image for java 9
          - [X] create a docker image using JDK 9
          - [X] Create a Docker Image using JDK 9 and Alpine Linux
          - [ ] Create a Docker Image using JDK 9 and a Java application
          - [ ] Reduce the size of a Docker Image using JDK 9 and a Java application 
      - [X] run a container
        - [X] pull image
        - [X] run conatiner
      - [X] multi-container app using docker compose
        - [X] what is docker compose
        - [X] configuration file
        - [X] start application
        - [X] verify application
        - [X] shutdown application
    - [X] [[https://github.com/docker/labs/blob/master/developer-tools/nodejs-debugging/VSCode-README.md][live debugging a nodejs app in docker]]
      - [X] getting started
    - [ ] [[https://github.com/docker/labs/tree/master/developer-tools/nodejs/porting/][dockerizing a nodejs appliation]]
  - [ ] [[https://docs.docker.com/engine/userguide/eng-image/dockerfile_best-practices/][best parctise for dockerfile]]
  - [-] [[https://docs.docker.com/engine/admin/volumes/][Manage application data]]
    - [X] choose the right type of mount
      - [X] more details about mount types
    - [ ] Good use cases for volumes
    - [ ] Good use cases for bind mounts
    - [ ] Good use cases for tmpfs mounts
    - [ ] Good use cases for tmpfs mounts
    - [ ] tips for using bind mounts or volumes
* [[https://log.zvz.im/2017/05/24/nodejs-cinema-microservice-part1/][nodejs 打造影院微服务并部署到 docker]]
  :LOGBOOK:
  CLOCK: [2017-12-18 一 23:11]--[2017-12-18 一 23:36] =>  0:25
  CLOCK: [2017-12-11 周一 18:34]--[2017-12-11 周一 18:59] =>  0:25
  CLOCK: [2017-12-07 周四 18:00]--[2017-12-07 周四 18:25] =>  0:25
  CLOCK: [2017-12-04 周一 10:18]--[2017-12-04 周一 10:43] =>  0:25
  :END:
**  [[http://www.infoq.com/cn/articles/power-of-raml][RAML]]
   - [ ] 编写 在线 api 设计器或者 ide 插件 [[https://raml.org/projects][地址]]
* [[https://mitpress.mit.edu/sicp/full-text/book/book-Z-H-4.html][SICP]]
  - [ ] 1.Building Abstractions with Procedures
    - [ ] 1.1 The elements of programming
      - [ ] 1.expression
      - [ ] 2.naming and environment
      - [ ] 3.evaluating combinations
      - [ ] 4.Compound Procedures
    - 
* 大型缓存架构
  :LOGBOOK:
  CLOCK: [2017-12-06 周三 15:23]--[2017-12-06 周三 15:48] =>  0:25
  :END:
  - [X] 28.redis cluster 集群搭建
  - [X] 29.多 master 写入,主从复制,高可用
  - [X] 30.redis cluster 通过 mater 水平扩容支持更高读写吞吐
  - [X] 31.redis cluster 自动化 slave 迁移实现更强的高可用架构
  - [X] 32.redis cluster 的核心原理分析
  - [X] 33.实践中的常见问题及优化思路
  - [X] 34.阶段总结
  - [X] 35.多级缓存架构每一层的意义
  - [X] 36.Cache Aside Pattern 缓存+数据库读写模式的分析
  - [X] 37.高并发场景下,缓存数据库双写不一致的问题与解决方案设计
  - [X] 38.安装 mysql
  - [ ] 38.库存服务开发框架搭建
* [[https://jimmysong.io/kubernetes-handbook/][kubernetes]]
  :LOGBOOK:
  CLOCK: [2017-12-19 二 10:51]--[2017-12-19 二 11:16] =>  0:25
  CLOCK: [2017-12-19 二 10:14]--[2017-12-19 二 10:39] =>  0:25
  CLOCK: [2017-12-19 二 09:42]--[2017-12-19 二 10:07] =>  0:25
  :END:
  - [X] 1.2 概览
  - [X] 2.1 kubernetes 架构
  - [ ] 2.3 资源对象与基本概念解析
